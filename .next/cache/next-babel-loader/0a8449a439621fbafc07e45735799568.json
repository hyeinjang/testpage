{"ast":null,"code":"var _jsxFileName = \"/Users/hi/project/test/components/view/Style.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from \"react\";\nimport { Form, Input, Button, Checkbox, Avatar, message } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nconst layout = {\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\nconst FlexChild = styled.div`\n    border: 1px solid #000;\n    width: 300px;\n    height: 200px;\n    \n    &:nth-of-type(1){\n    width: 350px;\n        background-color: gold;\n    }\n    &:nth-of-type(2){\n        width: 200px;\n        height: 100px;\n    }\n`;\nconst inputStyle = {\n  border: '1px solid #000',\n  width: '200px'\n};\n\nconst StyleView = () => {\n  const {\n    0: username,\n    1: setUsername\n  } = useState(null);\n  const {\n    0: password,\n    1: setPassword\n  } = useState(null);\n\n  const handleInputChange = e => {\n    console.log(e.target.value);\n  };\n\n  const onFinish = values => {\n    console.log('Success:', values);\n\n    const error = () => {\n      message.error('회원가입이 완료되었습니다.', 1);\n    };\n\n    error();\n  };\n\n  const onFinishFailed = errorInfo => {// console.log('Failed:', errorInfo);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Css Testboard!\"), __jsx(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: handleInputChange,\n    style: inputStyle,\n    name: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"text\",\n    style: inputStyle,\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      marginLeft: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Primary Button\"), __jsx(Avatar, {\n    size: 64,\n    icon: __jsx(UserOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(Form, _extends({\n    style: {\n      maxWidth: 300\n    }\n  }, layout, {\n    name: \"basic\",\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      required: true,\n      message: 'Please input your username!'\n    }, {\n      type: 'email',\n      message: 'e-mail 형식으로 작성해주세요.'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Input, {\n    placeholder: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(Input.Password, {\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), __jsx(Form.Item, {\n    name: \"passwordComfirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The two passwords that you entered do not match!');\n      }\n\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(Input.Password, {\n    placeholder: \"password again\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), __jsx(Form.Item, _extends({}, tailLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Submit\"))), __jsx(\"div\", {\n    className: \"flex justify-between bg-yellow-200 pd-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"left\"), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"right\")), __jsx(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(FlexChild, {\n    className: \"flex-none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(FlexChild, {\n    className: \"flex-initial\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), __jsx(FlexChild, {\n    className: \"bg-gray-300 flex-initial\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })));\n};\n\nexport default StyleView;","map":{"version":3,"sources":["/Users/hi/project/test/components/view/Style.js"],"names":["React","useState","Form","Input","Button","Checkbox","Avatar","message","UserOutlined","styled","layout","wrapperCol","span","tailLayout","offset","FlexChild","div","inputStyle","border","width","StyleView","username","setUsername","password","setPassword","handleInputChange","e","console","log","target","value","onFinish","values","error","onFinishFailed","errorInfo","marginLeft","maxWidth","required","type","getFieldValue","validator","rule","Promise","resolve","reject"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Input, Button, Checkbox, Avatar, message } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n\nconst layout = {\n    wrapperCol: {\n        span: 16,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nconst FlexChild = styled.div`\n    border: 1px solid #000;\n    width: 300px;\n    height: 200px;\n    \n    &:nth-of-type(1){\n    width: 350px;\n        background-color: gold;\n    }\n    &:nth-of-type(2){\n        width: 200px;\n        height: 100px;\n    }\n`\n\nconst inputStyle = {\n    border: '1px solid #000',\n    width: '200px'\n}\n\n\n\nconst StyleView = () => {\n\n    const [username, setUsername] = useState(null);\n    const [password, setPassword] = useState(null);\n\n    const handleInputChange = e => {\n        console.log(e.target.value);\n    }\n\n    const onFinish = values => {\n        console.log('Success:', values);\n\n\n        const error = () => {\n            message.error('회원가입이 완료되었습니다.', 1);\n        };\n        error();\n\n    };\n\n    const onFinishFailed = errorInfo => {\n        // console.log('Failed:', errorInfo);\n    };\n\n\n  return (\n    <>\n      <h1>Css Testboard!</h1>\n        <hr />\n\n        <form>\n            <input\n                type={\"text\"}\n                onChange={handleInputChange}\n                style={inputStyle}\n                name={\"username\"}\n            />\n            <input\n                type={\"text\"}\n                style={inputStyle}\n                name={\"password\"}\n            />\n        </form>\n\n        <Button type=\"primary\" style={{ marginLeft: 8 }}>\n            Primary Button\n        </Button>\n        <Avatar size={64} icon={<UserOutlined/>}/>\n\n        <Form\n            style={{maxWidth: 300}}\n            {...layout}\n            name=\"basic\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n        >\n            <Form.Item\n                name=\"email\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please input your username!',\n                    },\n                    {\n                        type: 'email',\n                        message: 'e-mail 형식으로 작성해주세요.'\n                    }\n                ]}\n            >\n                <Input placeholder={\"username\"}/>\n            </Form.Item>\n\n            <Form.Item\n                name=\"password\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please input your password!',\n                    },\n                ]}\n            >\n                <Input.Password placeholder={\"password\"}/>\n            </Form.Item>\n            <Form.Item\n                name=\"passwordComfirm\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please confirm your password!',\n                    },\n                    ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                            if (!value || getFieldValue('password') === value) {\n                                return Promise.resolve();\n                            }\n                            return Promise.reject('The two passwords that you entered do not match!');\n                        },\n                    }),\n                ]}\n            >\n                <Input.Password placeholder={\"password again\"}/>\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n\n\n        <div className={\"flex justify-between bg-yellow-200 pd-10\"}>\n            <span>left</span>\n            <span>right</span>\n        </div>\n\n        {/*<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"14\" viewBox=\"0 0 18 14\">*/}\n        {/*    <path fill=\"#9A9FBF\" fill-rule=\"evenodd\" d=\"M2 0H0v2h2V0zm2 0v2h14V0H4zm2 6H0v2h6V6zm2 0v2h2V6H8zm4 2h6V6h-6v2zM0 14h14v-1.999H0V14zm16 0h2v-1.999h-2V14z\" clip-rule=\"evenodd\"/>*/}\n        {/*</svg>*/}\n\n        <div className={\"flex\"}>\n            <FlexChild className={\"flex-none\"}/>\n            <FlexChild className={\"flex-initial\"}/>\n            <FlexChild className={\"bg-gray-300 flex-initial\"}/>\n\n        </div>\n\n\n\n\n    </>\n  );\n};\n\nexport default StyleView;\n"]},"metadata":{},"sourceType":"module"}